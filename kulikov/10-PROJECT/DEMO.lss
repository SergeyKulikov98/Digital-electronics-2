
DEMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000005cc  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800118  00800118  00000678  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001296  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5d  00000000  00000000  00001a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007eb  00000000  00000000  0000259b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00002d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000618  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b6  00000000  00000000  00003638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00003dee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 35       	cpi	r26, 0x5E	; 94
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a8 02 	call	0x550	; 0x550 <main>
  9e:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
  ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
  be:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
  c2:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  c4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <UART_RxHead>
  c8:	ef 5f       	subi	r30, 0xFF	; 255
  ca:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
  cc:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <UART_RxTail>
  d0:	e2 17       	cp	r30, r18
  d2:	39 f0       	breq	.+14     	; 0xe2 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
  d4:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	e3 5e       	subi	r30, 0xE3	; 227
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	90 83       	st	Z, r25
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
  e2:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
  e4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <__data_end>
  e8:	89 2b       	or	r24, r25
  ea:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 114:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <UART_TxHead>
 118:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <UART_TxTail>
 11c:	98 17       	cp	r25, r24
 11e:	69 f0       	breq	.+26     	; 0x13a <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 120:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <UART_TxTail>
 124:	ef 5f       	subi	r30, 0xFF	; 255
 126:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 128:	e0 93 1b 01 	sts	0x011B, r30	; 0x80011b <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e3 5c       	subi	r30, 0xC3	; 195
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	80 81       	ld	r24, Z
 134:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 138:	05 c0       	rjmp	.+10     	; 0x144 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 13a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 13e:	8f 7d       	andi	r24, 0xDF	; 223
 140:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 156:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <UART_TxHead>
    UART_TxTail = 0;
 15a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <UART_TxTail>
    UART_RxHead = 0;
 15e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <UART_RxHead>
    UART_RxTail = 0;
 162:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 166:	97 ff       	sbrs	r25, 7
 168:	03 c0       	rjmp	.+6      	; 0x170 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 16a:	22 e0       	ldi	r18, 0x02	; 2
 16c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 170:	90 78       	andi	r25, 0x80	; 128
 172:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 176:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 17a:	88 e9       	ldi	r24, 0x98	; 152
 17c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 186:	08 95       	ret

00000188 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
 188:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <UART_RxHead>
 18c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <UART_RxTail>
 190:	98 17       	cp	r25, r24
 192:	a9 f0       	breq	.+42     	; 0x1be <uart_getc+0x36>
    {
        return UART_NO_DATA; /* no data available */
    }

    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 194:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <UART_RxTail>
 198:	9f 5f       	subi	r25, 0xFF	; 255
 19a:	9f 71       	andi	r25, 0x1F	; 31

    /* get data from receive buffer */
    data        = UART_RxBuf[tmptail];
 19c:	e9 2f       	mov	r30, r25
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	e3 5e       	subi	r30, 0xE3	; 227
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 1a6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>

    /* store buffer index */
    UART_RxTail = tmptail;
 1aa:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <UART_RxTail>

    UART_LastRxError = 0;
 1ae:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
    return (lastRxError << 8) + data;
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	98 2f       	mov	r25, r24
 1b6:	88 27       	eor	r24, r24
 1b8:	82 0f       	add	r24, r18
 1ba:	91 1d       	adc	r25, r1
 1bc:	08 95       	ret
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
    {
        return UART_NO_DATA; /* no data available */
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	91 e0       	ldi	r25, 0x01	; 1
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 1c2:	08 95       	ret

000001c4 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1c4:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <UART_TxHead>
 1c8:	9f 5f       	subi	r25, 0xFF	; 255
 1ca:	9f 71       	andi	r25, 0x1F	; 31

    while (tmphead == UART_TxTail)
 1cc:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <UART_TxTail>
 1d0:	92 17       	cp	r25, r18
 1d2:	e1 f3       	breq	.-8      	; 0x1cc <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 1d4:	e9 2f       	mov	r30, r25
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	e3 5c       	subi	r30, 0xC3	; 195
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 1de:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 1e2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1ec:	08 95       	ret

000001ee <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
    while (*s)
 1f4:	89 91       	ld	r24, Y+
 1f6:	88 23       	and	r24, r24
 1f8:	19 f0       	breq	.+6      	; 0x200 <uart_puts+0x12>
        uart_putc(*s++);
 1fa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart_putc>
 1fe:	fa cf       	rjmp	.-12     	; 0x1f4 <uart_puts+0x6>
}/* uart_puts */
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 20c:	84 91       	lpm	r24, Z
 20e:	ef 01       	movw	r28, r30
 210:	21 96       	adiw	r28, 0x01	; 1
 212:	88 23       	and	r24, r24
 214:	21 f0       	breq	.+8      	; 0x21e <uart_puts_p+0x18>
        uart_putc(c);
 216:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart_putc>
 21a:	fe 01       	movw	r30, r28
 21c:	f7 cf       	rjmp	.-18     	; 0x20c <uart_puts_p+0x6>
}/* uart_puts_p */
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <twi_init>:

/* Functions ---------------------------------------------------------*/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 224:	87 b1       	in	r24, 0x07	; 7
 226:	8f 7c       	andi	r24, 0xCF	; 207
 228:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 22a:	88 b1       	in	r24, 0x08	; 8
 22c:	80 63       	ori	r24, 0x30	; 48
 22e:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 230:	e9 eb       	ldi	r30, 0xB9	; 185
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	8c 7f       	andi	r24, 0xFC	; 252
 238:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 23a:	88 e9       	ldi	r24, 0x98	; 152
 23c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 240:	08 95       	ret

00000242 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 242:	94 ea       	ldi	r25, 0xA4	; 164
 244:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 248:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 24c:	97 ff       	sbrs	r25, 7
 24e:	fc cf       	rjmp	.-8      	; 0x248 <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 250:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 254:	84 e8       	ldi	r24, 0x84	; 132
 256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 25a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 25e:	87 ff       	sbrs	r24, 7
 260:	fc cf       	rjmp	.-8      	; 0x25a <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 262:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 266:	98 7f       	andi	r25, 0xF8	; 248
    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
        if (twi_response == 0x18 || twi_response == 0x40) {
 268:	98 31       	cpi	r25, 0x18	; 24
 26a:	19 f0       	breq	.+6      	; 0x272 <twi_start+0x30>
        return 0;   /* Slave device accessible */
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 34       	cpi	r25, 0x40	; 64
 270:	09 f4       	brne	.+2      	; 0x274 <twi_start+0x32>
 272:	80 e0       	ldi	r24, 0x00	; 0
    }
    else {
        return 1;   /* Failed to access slave device */
    }
}
 274:	08 95       	ret

00000276 <twi_write>:


/*--------------------------------------------------------------------*/
void twi_write(uint8_t data)
{
    TWDR = data;
 276:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 27a:	84 e8       	ldi	r24, 0x84	; 132
 27c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 280:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 284:	87 ff       	sbrs	r24, 7
 286:	fc cf       	rjmp	.-8      	; 0x280 <twi_write+0xa>
}
 288:	08 95       	ret

0000028a <twi_read_ack>:


/*--------------------------------------------------------------------*/
uint8_t twi_read_ack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 28a:	84 ec       	ldi	r24, 0xC4	; 196
 28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 290:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 294:	87 ff       	sbrs	r24, 7
 296:	fc cf       	rjmp	.-8      	; 0x290 <twi_read_ack+0x6>
	return (TWDR);
 298:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 29c:	08 95       	ret

0000029e <twi_read_nack>:


/*--------------------------------------------------------------------*/
uint8_t twi_read_nack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
 29e:	84 e8       	ldi	r24, 0x84	; 132
 2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 2a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2a8:	87 ff       	sbrs	r24, 7
 2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <twi_read_nack+0x6>
	return (TWDR);
 2ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 2b0:	08 95       	ret

000002b2 <twi_stop>:


/*--------------------------------------------------------------------*/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 2b2:	84 e9       	ldi	r24, 0x94	; 148
 2b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2b8:	08 95       	ret

000002ba <GPIO_config_output>:
 2ba:	fc 01       	movw	r30, r24
 2bc:	40 81       	ld	r20, Z
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <GPIO_config_output+0xc>
 2c4:	22 0f       	add	r18, r18
 2c6:	6a 95       	dec	r22
 2c8:	ea f7       	brpl	.-6      	; 0x2c4 <GPIO_config_output+0xa>
 2ca:	24 2b       	or	r18, r20
 2cc:	20 83       	st	Z, r18
 2ce:	08 95       	ret

000002d0 <GPIO_config_input_nopull>:
 2d0:	fc 01       	movw	r30, r24
 2d2:	40 81       	ld	r20, Z
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <GPIO_config_input_nopull+0xc>
 2da:	22 0f       	add	r18, r18
 2dc:	6a 95       	dec	r22
 2de:	ea f7       	brpl	.-6      	; 0x2da <GPIO_config_input_nopull+0xa>
 2e0:	24 2b       	or	r18, r20
 2e2:	20 83       	st	Z, r18
 2e4:	08 95       	ret

000002e6 <GPIO_config_input_pullup>:
  *reg_name  |= _BV(pin_num);
}

void GPIO_config_input_pullup(volatile uint8_t *reg_name , uint8_t  pin_num)
{
  *reg_name |= _BV(pin_num);
 2e6:	fc 01       	movw	r30, r24
 2e8:	40 81       	ld	r20, Z
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <GPIO_config_input_pullup+0xc>
 2f0:	22 0f       	add	r18, r18
 2f2:	6a 95       	dec	r22
 2f4:	ea f7       	brpl	.-6      	; 0x2f0 <GPIO_config_input_pullup+0xa>
 2f6:	24 2b       	or	r18, r20
 2f8:	20 83       	st	Z, r18
 2fa:	08 95       	ret

000002fc <GPIO_write>:
}

void GPIO_write(volatile uint8_t *reg_name , uint8_t  pin_num, uint8_t pinval)
{
 2fc:	fc 01       	movw	r30, r24
  if (pinval)
    *reg_name |= _BV(pin_num);
 2fe:	80 81       	ld	r24, Z
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	01 c0       	rjmp	.+2      	; 0x308 <GPIO_write+0xc>
 306:	22 0f       	add	r18, r18
 308:	6a 95       	dec	r22
 30a:	ea f7       	brpl	.-6      	; 0x306 <GPIO_write+0xa>
  *reg_name |= _BV(pin_num);
}

void GPIO_write(volatile uint8_t *reg_name , uint8_t  pin_num, uint8_t pinval)
{
  if (pinval)
 30c:	44 23       	and	r20, r20
 30e:	11 f0       	breq	.+4      	; 0x314 <GPIO_write+0x18>
    *reg_name |= _BV(pin_num);
 310:	28 2b       	or	r18, r24
 312:	02 c0       	rjmp	.+4      	; 0x318 <GPIO_write+0x1c>
  else
    *reg_name &= ~(_BV(pin_num));
 314:	20 95       	com	r18
 316:	28 23       	and	r18, r24
 318:	20 83       	st	Z, r18
 31a:	08 95       	ret

0000031c <GPIO_toggle>:
}

void GPIO_toggle(volatile uint8_t *reg_name , uint8_t  pin_num)
{
    *reg_name ^= _BV(pin_num);
 31c:	fc 01       	movw	r30, r24
 31e:	40 81       	ld	r20, Z
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	01 c0       	rjmp	.+2      	; 0x328 <GPIO_toggle+0xc>
 326:	22 0f       	add	r18, r18
 328:	6a 95       	dec	r22
 32a:	ea f7       	brpl	.-6      	; 0x326 <GPIO_toggle+0xa>
 32c:	24 27       	eor	r18, r20
 32e:	20 83       	st	Z, r18
 330:	08 95       	ret

00000332 <GPIO_read>:
}

uint8_t GPIO_read(volatile uint8_t *reg_name , uint8_t  pin_num)
{
  return *reg_name & _BV(pin_num);
 332:	fc 01       	movw	r30, r24
 334:	20 81       	ld	r18, Z
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	01 c0       	rjmp	.+2      	; 0x33e <GPIO_read+0xc>
 33c:	88 0f       	add	r24, r24
 33e:	6a 95       	dec	r22
 340:	ea f7       	brpl	.-6      	; 0x33c <GPIO_read+0xa>
 342:	82 23       	and	r24, r18
 344:	08 95       	ret

00000346 <TIM_config_prescaler>:
#include  "timer.h"
#include <avr/interrupt.h>


void  TIM_config_prescaler(uint8_t  timer_name, uint8_t  presc_val) {
    switch(timer_name) {
 346:	88 23       	and	r24, r24
 348:	19 f0       	breq	.+6      	; 0x350 <TIM_config_prescaler+0xa>
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	51 f1       	breq	.+84     	; 0x3a2 <TIM_config_prescaler+0x5c>
 34e:	08 95       	ret
        case TIM0:
            switch(presc_val) {
 350:	63 30       	cpi	r22, 0x03	; 3
 352:	a9 f0       	breq	.+42     	; 0x37e <TIM_config_prescaler+0x38>
 354:	28 f4       	brcc	.+10     	; 0x360 <TIM_config_prescaler+0x1a>
 356:	66 23       	and	r22, r22
 358:	41 f0       	breq	.+16     	; 0x36a <TIM_config_prescaler+0x24>
 35a:	61 30       	cpi	r22, 0x01	; 1
 35c:	49 f0       	breq	.+18     	; 0x370 <TIM_config_prescaler+0x2a>
 35e:	08 95       	ret
 360:	65 30       	cpi	r22, 0x05	; 5
 362:	99 f0       	breq	.+38     	; 0x38a <TIM_config_prescaler+0x44>
 364:	66 30       	cpi	r22, 0x06	; 6
 366:	b9 f0       	breq	.+46     	; 0x396 <TIM_config_prescaler+0x50>
 368:	08 95       	ret
                case TIM_PRESC_1:
                    TCCR0B &= 0b11111000;
 36a:	85 b5       	in	r24, 0x25	; 37
 36c:	88 7f       	andi	r24, 0xF8	; 248
 36e:	05 c0       	rjmp	.+10     	; 0x37a <TIM_config_prescaler+0x34>
//                  TCCR0B |= 0b000;
                    break;
                case TIM_PRESC_8:
                    TCCR0B &= 0b11111000;
 370:	85 b5       	in	r24, 0x25	; 37
 372:	88 7f       	andi	r24, 0xF8	; 248
 374:	85 bd       	out	0x25, r24	; 37
                    TCCR0B |= 0b010;
 376:	85 b5       	in	r24, 0x25	; 37
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	85 bd       	out	0x25, r24	; 37
                    break;
 37c:	08 95       	ret
                    TCCR0B &= 0b11111000;
                    TCCR0B |= 0;
                    break;
*/
                case TIM_PRESC_64:
                    TCCR0B &= 0b11111000;
 37e:	85 b5       	in	r24, 0x25	; 37
 380:	88 7f       	andi	r24, 0xF8	; 248
 382:	85 bd       	out	0x25, r24	; 37
                    TCCR0B |= 0b011;
 384:	85 b5       	in	r24, 0x25	; 37
 386:	83 60       	ori	r24, 0x03	; 3
 388:	f8 cf       	rjmp	.-16     	; 0x37a <TIM_config_prescaler+0x34>
                    TCCR0B &= 0b11111000;
                    TCCR0B |= 0;
                    break;
*/
                case TIM_PRESC_256:
                    TCCR0B &= 0b11111000;
 38a:	85 b5       	in	r24, 0x25	; 37
 38c:	88 7f       	andi	r24, 0xF8	; 248
 38e:	85 bd       	out	0x25, r24	; 37
                    TCCR0B |= 0b100;
 390:	85 b5       	in	r24, 0x25	; 37
 392:	84 60       	ori	r24, 0x04	; 4
 394:	f2 cf       	rjmp	.-28     	; 0x37a <TIM_config_prescaler+0x34>
                    break;
                case TIM_PRESC_1024:
                    TCCR0B &= 0b11111000;
 396:	85 b5       	in	r24, 0x25	; 37
 398:	88 7f       	andi	r24, 0xF8	; 248
 39a:	85 bd       	out	0x25, r24	; 37
                    TCCR0B |= 0b101;
 39c:	85 b5       	in	r24, 0x25	; 37
 39e:	85 60       	ori	r24, 0x05	; 5
 3a0:	ec cf       	rjmp	.-40     	; 0x37a <TIM_config_prescaler+0x34>
                    break;
            }
            break;
        case TIM1:
            switch(presc_val) {
 3a2:	63 30       	cpi	r22, 0x03	; 3
 3a4:	c1 f0       	breq	.+48     	; 0x3d6 <TIM_config_prescaler+0x90>
 3a6:	28 f4       	brcc	.+10     	; 0x3b2 <TIM_config_prescaler+0x6c>
 3a8:	66 23       	and	r22, r22
 3aa:	41 f0       	breq	.+16     	; 0x3bc <TIM_config_prescaler+0x76>
 3ac:	61 30       	cpi	r22, 0x01	; 1
 3ae:	51 f0       	breq	.+20     	; 0x3c4 <TIM_config_prescaler+0x7e>
 3b0:	08 95       	ret
 3b2:	65 30       	cpi	r22, 0x05	; 5
 3b4:	c9 f0       	breq	.+50     	; 0x3e8 <TIM_config_prescaler+0xa2>
 3b6:	66 30       	cpi	r22, 0x06	; 6
 3b8:	01 f1       	breq	.+64     	; 0x3fa <TIM_config_prescaler+0xb4>
 3ba:	08 95       	ret
                case TIM_PRESC_1:
                    TCCR1B &= 0b11111000;
 3bc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3c0:	88 7f       	andi	r24, 0xF8	; 248
 3c2:	23 c0       	rjmp	.+70     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
//                  TCCR1B |= 0b000;
                    break;
                case TIM_PRESC_8:
                    TCCR1B &= 0b11111000;
 3c4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3c8:	88 7f       	andi	r24, 0xF8	; 248
 3ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                    TCCR1B |= 0b010;
 3ce:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	1a c0       	rjmp	.+52     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
                    TCCR1B &= 0b11111000;
                    TCCR1B |= 0;
                    break;
*/
                case TIM_PRESC_64:
                    TCCR1B &= 0b11111000;
 3d6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3da:	88 7f       	andi	r24, 0xF8	; 248
 3dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                    TCCR1B |= 0b011;
 3e0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3e4:	83 60       	ori	r24, 0x03	; 3
 3e6:	11 c0       	rjmp	.+34     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
                    TCCR1B &= 0b11111000;
                    TCCR1B |= 0;
                    break;
*/
                case TIM_PRESC_256:
                    TCCR1B &= 0b11111000;
 3e8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3ec:	88 7f       	andi	r24, 0xF8	; 248
 3ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                    TCCR1B |= 0b100;
 3f2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3f6:	84 60       	ori	r24, 0x04	; 4
 3f8:	08 c0       	rjmp	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
                    break;
                case TIM_PRESC_1024:
                    TCCR1B &= 0b11111000;
 3fa:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3fe:	88 7f       	andi	r24, 0xF8	; 248
 400:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                    TCCR1B |= 0b101;
 404:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 408:	85 60       	ori	r24, 0x05	; 5
 40a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 40e:	08 95       	ret

00000410 <TIM_config_interrupt>:
            break;
    }
}

void  TIM_config_interrupt(uint8_t  timer_name, uint8_t  interr_mode) {
    switch(timer_name) {
 410:	88 23       	and	r24, r24
 412:	19 f0       	breq	.+6      	; 0x41a <TIM_config_interrupt+0xa>
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	81 f0       	breq	.+32     	; 0x438 <TIM_config_interrupt+0x28>
 418:	08 95       	ret
        case TIM0:
            switch(interr_mode)  {
 41a:	66 23       	and	r22, r22
 41c:	19 f0       	breq	.+6      	; 0x424 <TIM_config_interrupt+0x14>
 41e:	61 30       	cpi	r22, 0x01	; 1
 420:	29 f0       	breq	.+10     	; 0x42c <TIM_config_interrupt+0x1c>
 422:	08 95       	ret
                case TIM_OVERFLOW_DISABLE:
                    TIMSK0 &= ~_BV(TOIE0);
 424:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 428:	8e 7f       	andi	r24, 0xFE	; 254
 42a:	03 c0       	rjmp	.+6      	; 0x432 <TIM_config_interrupt+0x22>
                    break;
                case TIM_OVERFLOW_ENABLE:
                    TIMSK0 |= _BV(TOIE0);
 42c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 430:	81 60       	ori	r24, 0x01	; 1
 432:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
                    break;
 436:	08 95       	ret
            }
            break;
        case TIM1:
            switch(interr_mode)  {
 438:	66 23       	and	r22, r22
 43a:	19 f0       	breq	.+6      	; 0x442 <TIM_config_interrupt+0x32>
 43c:	61 30       	cpi	r22, 0x01	; 1
 43e:	29 f0       	breq	.+10     	; 0x44a <TIM_config_interrupt+0x3a>
 440:	08 95       	ret
                case TIM_OVERFLOW_DISABLE:
                    TIMSK1 &= ~_BV(TOIE1);
 442:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 446:	8e 7f       	andi	r24, 0xFE	; 254
 448:	03 c0       	rjmp	.+6      	; 0x450 <TIM_config_interrupt+0x40>
                    break;
                case TIM_OVERFLOW_ENABLE:
                    TIMSK1 |= _BV(TOIE1);
 44a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 454:	08 95       	ret

00000456 <SEG_getPtrData>:
uint8_t index = 0;

uint8_t* SEG_getPtrData()
{
    return segment_data;
}
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	08 95       	ret

0000045c <SEG_toggle_clk>:

/*--------------------------------------------------------------------*/
void SEG_toggle_clk(void)
{
    /* TODO: Generate 2 us clock period */
    GPIO_write (&PORTD, SEGMENT_CLK, 1);
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	67 e0       	ldi	r22, 0x07	; 7
 460:	8b e2       	ldi	r24, 0x2B	; 43
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 468:	85 e0       	ldi	r24, 0x05	; 5
 46a:	8a 95       	dec	r24
 46c:	f1 f7       	brne	.-4      	; 0x46a <SEG_toggle_clk+0xe>
 46e:	00 00       	nop
    _delay_us(1);
    GPIO_write (&PORTD, SEGMENT_CLK, 0);
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	67 e0       	ldi	r22, 0x07	; 7
 474:	8b e2       	ldi	r24, 0x2B	; 43
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_write>
 47c:	85 e0       	ldi	r24, 0x05	; 5
 47e:	8a 95       	dec	r24
 480:	f1 f7       	brne	.-4      	; 0x47e <SEG_toggle_clk+0x22>
 482:	00 00       	nop
 484:	08 95       	ret

00000486 <SEG_putc>:
}

/* Functions ---------------------------------------------------------*/
void SEG_putc(uint8_t digit,
              uint8_t position)
{
 486:	cf 92       	push	r12
 488:	df 92       	push	r13
 48a:	ef 92       	push	r14
 48c:	ff 92       	push	r15
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
    uint8_t i;

    /* Read values from look-up tables */
    digit    = segment_digit[digit];
 494:	e8 2f       	mov	r30, r24
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	e8 5f       	subi	r30, 0xF8	; 248
 49a:	fe 4f       	sbci	r31, 0xFE	; 254
 49c:	f0 80       	ld	r15, Z
    position = segment_position[position];
 49e:	e6 2f       	mov	r30, r22
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	ec 5f       	subi	r30, 0xFC	; 252
 4a4:	fe 4f       	sbci	r31, 0xFE	; 254
 4a6:	10 81       	ld	r17, Z
 4a8:	c7 e0       	ldi	r28, 0x07	; 7
 4aa:	d0 e0       	ldi	r29, 0x00	; 0

    /* Put 1st byte to serial data */
    for (i = 0; i < 8; i++) {
        // TODO: Test and send 8 individual "digit" bits
        GPIO_write(&PORTB, SEGMENT_DATA, digit & _BV(7-i));
 4ac:	cc 24       	eor	r12, r12
 4ae:	c3 94       	inc	r12
 4b0:	d1 2c       	mov	r13, r1
 4b2:	a6 01       	movw	r20, r12
 4b4:	0c 2e       	mov	r0, r28
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <SEG_putc+0x34>
 4b8:	44 0f       	add	r20, r20
 4ba:	0a 94       	dec	r0
 4bc:	ea f7       	brpl	.-6      	; 0x4b8 <SEG_putc+0x32>
 4be:	4f 21       	and	r20, r15
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	85 e2       	ldi	r24, 0x25	; 37
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_write>
        SEG_toggle_clk();
 4ca:	0e 94 2e 02 	call	0x45c	; 0x45c <SEG_toggle_clk>
 4ce:	21 97       	sbiw	r28, 0x01	; 1
 4d0:	80 f7       	brcc	.-32     	; 0x4b2 <SEG_putc+0x2c>
 4d2:	c7 e0       	ldi	r28, 0x07	; 7
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /* Put 2nd byte to serial data */
    for (i = 0; i < 8; i++) {
        // TODO: Test and send 8 individual "position" bits
        GPIO_write(&PORTB, SEGMENT_DATA, position & _BV(7-i));
 4d6:	ee 24       	eor	r14, r14
 4d8:	e3 94       	inc	r14
 4da:	f1 2c       	mov	r15, r1
 4dc:	a7 01       	movw	r20, r14
 4de:	0c 2e       	mov	r0, r28
 4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <SEG_putc+0x5e>
 4e2:	44 0f       	add	r20, r20
 4e4:	0a 94       	dec	r0
 4e6:	ea f7       	brpl	.-6      	; 0x4e2 <SEG_putc+0x5c>
 4e8:	41 23       	and	r20, r17
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	85 e2       	ldi	r24, 0x25	; 37
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_write>
        //GPIO_write(&PORTB, SEGMENT_DATA, 1);
        SEG_toggle_clk();
 4f4:	0e 94 2e 02 	call	0x45c	; 0x45c <SEG_toggle_clk>
 4f8:	21 97       	sbiw	r28, 0x01	; 1
 4fa:	80 f7       	brcc	.-32     	; 0x4dc <SEG_putc+0x56>
    }

    /* TODO: Generate 1 us latch pulse */
    GPIO_write (&PORTD, SEGMENT_LATCH, 1);
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	64 e0       	ldi	r22, 0x04	; 4
 500:	8b e2       	ldi	r24, 0x2B	; 43
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_write>
 508:	85 e0       	ldi	r24, 0x05	; 5
 50a:	8a 95       	dec	r24
 50c:	f1 f7       	brne	.-4      	; 0x50a <SEG_putc+0x84>
 50e:	00 00       	nop
    _delay_us(1);
    GPIO_write (&PORTD, SEGMENT_LATCH, 0);
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	64 e0       	ldi	r22, 0x04	; 4
 514:	8b e2       	ldi	r24, 0x2B	; 43
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_write>
 51c:	85 e0       	ldi	r24, 0x05	; 5
 51e:	8a 95       	dec	r24
 520:	f1 f7       	brne	.-4      	; 0x51e <SEG_putc+0x98>
 522:	00 00       	nop
    _delay_us(1);

}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	ff 90       	pop	r15
 52c:	ef 90       	pop	r14
 52e:	df 90       	pop	r13
 530:	cf 90       	pop	r12
 532:	08 95       	ret

00000534 <SEG_next>:
    return segment_data;
}

void SEG_next()
{
    index = (index + 1) & 0b00000011;
 534:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <index>
 538:	ef 5f       	subi	r30, 0xFF	; 255
 53a:	e3 70       	andi	r30, 0x03	; 3
 53c:	e0 93 5d 01 	sts	0x015D, r30	; 0x80015d <index>
    SEG_putc (segment_data[index], 3-index);
 540:	63 e0       	ldi	r22, 0x03	; 3
 542:	6e 1b       	sub	r22, r30
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	e0 50       	subi	r30, 0x00	; 0
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	80 81       	ld	r24, Z
 54c:	0c 94 43 02 	jmp	0x486	; 0x486 <SEG_putc>

00000550 <main>:


int main(void)
{
	/* config sensor */
	GPIO_config_output(&DDRD, TRIG);
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	8a e2       	ldi	r24, 0x2A	; 42
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 5d 01 	call	0x2ba	; 0x2ba <GPIO_config_output>
	GPIO_config_input_nopull(&DDRD, ECHO);
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	8a e2       	ldi	r24, 0x2A	; 42
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 68 01 	call	0x2d0	; 0x2d0 <GPIO_config_input_nopull>
 
	/* config 7 segment */
	GPIO_config_output(&DDRB, SEGMENT_DATA );
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	84 e2       	ldi	r24, 0x24	; 36
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <GPIO_config_output>
	GPIO_config_output(&DDRD, SEGMENT_CLK );
 56e:	67 e0       	ldi	r22, 0x07	; 7
 570:	8a e2       	ldi	r24, 0x2A	; 42
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 5d 01 	call	0x2ba	; 0x2ba <GPIO_config_output>
	GPIO_config_output(&DDRD, SEGMENT_LATCH );
 578:	64 e0       	ldi	r22, 0x04	; 4
 57a:	8a e2       	ldi	r24, 0x2A	; 42
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <GPIO_config_output>
	
   
    /* Timer0
     * TODO: Configure Timer0 clock source and enable overflow 
     *       interrupt */
    TIM_config_prescaler(TIM0, TIM_PRESC_8);
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	0e 94 a3 01 	call	0x346	; 0x346 <TIM_config_prescaler>
    //TIM_config_interrupt(TIM0, TIM_OVERFLOW_ENABLE);

    // UART: asynchronous, 8-bit data, no parity, 1-bit stop
    uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU));
 58a:	87 e6       	ldi	r24, 0x67	; 103
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 ab 00 	call	0x156	; 0x156 <uart_init>

	 // Enables interrupts by setting the global interrupt mask
    sei();
 592:	78 94       	sei
    // Infinite loop
    for (;;) {
		
		
		
		GPIO_toggle(&PORTD,TRIG);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	8b e2       	ldi	r24, 0x2B	; 43
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 8e 01 	call	0x31c	; 0x31c <GPIO_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59e:	2f ef       	ldi	r18, 0xFF	; 255
 5a0:	89 e6       	ldi	r24, 0x69	; 105
 5a2:	98 e1       	ldi	r25, 0x18	; 24
 5a4:	21 50       	subi	r18, 0x01	; 1
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0x54>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x5e>
 5ae:	00 00       	nop
		
		_delay_ms(500);

		GPIO_toggle(&PORTD,TRIG);	
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	8b e2       	ldi	r24, 0x2B	; 43
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 8e 01 	call	0x31c	; 0x31c <GPIO_toggle>

		
		


		TIFR0 &= ~_BV(TOV0);
 5ba:	a8 98       	cbi	0x15, 0	; 21
			TIFR0 &= ~_BV(TOV0);
			count++;
		}	
		
		else if(ECHO==1){
			GPIO_toggle(&PORTD, TRIG);
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	8b e2       	ldi	r24, 0x2B	; 43
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 8e 01 	call	0x31c	; 0x31c <GPIO_toggle>
 5c6:	e6 cf       	rjmp	.-52     	; 0x594 <main+0x44>

000005c8 <_exit>:
 5c8:	f8 94       	cli

000005ca <__stop_program>:
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <__stop_program>
